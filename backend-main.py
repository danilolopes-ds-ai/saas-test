"""
Aplica√ß√£o principal do SaaS Multi-Nicho para profissionais de sa√∫de e bem-estar.
Implementa arquitetura hexagonal (ports and adapters) seguindo princ√≠pios SOLID.
"""
import logging
from contextlib import asynccontextmanager

from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware

from app.api.router import api_router
from app.core.config import settings
from app.di_container import setup_di
from app.utils.logging import setup_logging

# Configura√ß√£o de logging estruturado
logger = setup_logging()

# Context manager para inicializa√ß√£o/encerramento de recursos
@asynccontextmanager
async def lifespan(app: FastAPI):
    """
    Context manager para inicializa√ß√£o e encerramento de recursos
    na inicializa√ß√£o/desligamento da aplica√ß√£o.
    """
    # Inicializa√ß√£o de recursos
    logger.info("üöÄ Iniciando aplica√ß√£o")
    
    # Registrar recursos compartilhados na aplica√ß√£o
    logger.info("üîå Configurando container de depend√™ncias")
    app.state.injector = setup_di()
    
    logger.info("‚úÖ Aplica√ß√£o iniciada com sucesso")
    yield
    
    # Limpeza de recursos ao encerrar
    logger.info("üõë Finalizando aplica√ß√£o")
    # Fechar conex√µes de banco e outros recursos
    logger.info("üëã Aplica√ß√£o finalizada")


# Cria√ß√£o da aplica√ß√£o FastAPI
def create_app() -> FastAPI:
    """
    Factory de cria√ß√£o da aplica√ß√£o FastAPI com todas as configura√ß√µes.
    Separado em fun√ß√£o para facilitar testes.
    """
    app = FastAPI(
        title="SaaS Multi-Nicho para Sa√∫de e Bem-estar",
        description="API para SaaS modular com arquitetura SOLID",
        version="0.1.0",
        lifespan=lifespan,
        docs_url="/api/docs" if settings.DEBUG else None,
        redoc_url="/api/redoc" if settings.DEBUG else None,
    )
    
    # Configura√ß√£o de CORS
    app.add_middleware(
        CORSMiddleware,
        allow_origins=settings.CORS_ORIGINS,
        allow_credentials=True,
        allow_methods=["*"],
        allow_headers=["*"],
    )
    
    # Inclus√£o de rotas
    app.include_router(api_router, prefix=settings.API_PREFIX)
    
    return app


# Inst√¢ncia da aplica√ß√£o para ser utilizada pelo servidor ASGI
app = create_app()